#include <stdio.h>
#define MAX 5
struct Pqueue
{
   int val;
   int p;
}pqueue[MAX];

int f=-1,r=-1;

int enqueue(int item)
{
    if (isFull())
        printf("Overflow\n");
    else
    {
        r = (r + 1) % MAX;
        pqueue[r] = item;
        if (f == -1)
            f = 0;
    }
    return r;
}


int dequeue()
{
    int item,position,i;
    if (isEmpty())
    {
        printf("Underflow\n");
        return -999;
    }
    else if (r == f)
    {   
        item = pqueue[f].val;
        r = -1;
        f = -1;
        return item;
    }
    else
    {
       position = find_highest_priority();
       item  = pqueue[position].val;
       for(i=position;i<r;i++)
       {
            pqueue[i]=pqueue[i+1];
       }
       r--;
       return item;
    }
}


void display()
{
    int i;
    if (isEmpty())
    {
        printf(">>Array is Empty!!\n");
    }
    else
    {
        printf("<<<<Queue>>>>\n");
        int i = f;
        do
        {
            printf("\t%d", pqueue[i].val);
            i = (i + 1) % MAX;
        } while (i != (r + 1) % MAX);
    }
}

int find_highest_priority()
{
    int index=-1,max=pqueue[f].p,i=f+1;
    for(; i <= r ; i++ )
    {
        if(max > pqueue[i].p)
        {
            max = pqueue[i].p;
            index = i;
        }
    }

    return index;
}

int isEmpty()
{
    return r == -1 && f == -1;
}
int isFull()
{
    return f == (r + 1) % MAX;
}

int main()
{
    int choice;
    struct Pqueue item;
    while (1)
    {
        printf("\n-----Choose an option----\n");
        printf("\t1.Enqueue\n\t2.Dequeue\n\t3.Disply\n\t0.Exit\n");
        printf("\t:> ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("\nEnter {value , priority} to enqueue: ");
            scanf("%d%d", &item.val,&item.p);
            printf(">>>>>>>>%d", enqueue(item));
            break;
        case 2:
            dequeue();
            break;
        case 3:
            display();
            break;
        case 0:
            return 0;
        default:
            printf("\nInvalid choice!!\n");
            break;
        }
    }

    return 0;
}

